provider "aws" {

  region     = "ap-south-1"

  profile = "default"


}

resource "tls_private_key" "skey" {
  algorithm  = "RSA"
  rsa_bits   = 4096
}
resource "aws_key_pair" "MY_KEY" 
{  key_name   = "Your_Key_Name_Here"
  public_key = var.x
}

resource "aws_security_group" "customtcp" {
  name        = "MY_SG"
  description = "rule of TCP inbound traffic"
  vpc_id      = "vpc-dcffe2b4"




  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }
ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }


tags = {
    Name = "Allowing TCP"
  }
}


resource "aws_vpc" "task2vpc" {

  cidr_block = "10.0.0.0/16"

  instance_tenancy="default"

  enable_dns_hostnames = true

  tags = {

    Name = "task2vpc"

  }

}


resource "aws_subnet" "mysubnet" {

  vpc_id            = aws_vpc.task2vpc.id

  availability_zone = "ap-south-1a"

  cidr_block        = "10.0.1.0/24"

  map_public_ip_on_launch = true

  tags = {

    Name = "mysubnet"

  }


}

resource "aws_internet_gateway" "IG" {

  vpc_id = aws_vpc.task2vpc.id

  tags = {

    Name = "IG"

  }

}




resource "aws_route_table" "myrtable" {

  vpc_id = aws_vpc.task2vpc.id

  route {

    cidr_block = "0.0.0.0/0"

    gateway_id = aws_internet_gateway.mygtw.id

  }

  tags = {

    Name = "myrtable"

  }

}

resource "aws_route_table_association" "assoc" {

  subnet_id      = aws_subnet.mysubnet.id

  route_table_id = aws_route_table.myrtable.id

}


resource "aws_efs_file_system" "myefs" {

  creation_token = "my-efs"

  performance_mode="generalPurpose"

  tags = {

    Name = "myefs"

  }


}


resource "aws_efs_file_system_policy" "policy" {

  file_system_id = aws_efs_file_system.myefs.id

  policy = <<POLICY

{

    "Version": "2012-10-17",

    "Id": "efs-policy-wizard-c45881c9-af16-441d-aa48-0fbd68ffaf79",

    "Statement": [

        {

            "Sid": "efs-statement-20e4223c-ca0e-412d-8490-3c3980f60788",

            "Effect": "Allow",

            "Principal": {

                "AWS": "*"

            },

            "Resource": "${aws_efs_file_system.myefs.arn}",

            "Action": [

                "elasticfilesystem:ClientMount",

                "elasticfilesystem:ClientWrite",

                "elasticfilesystem:ClientRootAccess"

            ],

            "Condition": {

                "Bool": {

                    "aws:SecureTransport": "true"

                }

            }

        }

    ]

}

POLICY

}


resource "aws_efs_mount_target" "mymount" {

  file_system_id = aws_efs_file_system.myefs.id

  subnet_id      = aws_subnet.mysubnet.id

  security_groups = [ "${aws_security_group.mysg.id}" ]


}



resource "aws_instance" "myin" {

  ami           = "ami-00b494a3f139ba61f"

  instance_type = "t2.micro"

  key_name      = "Ajay_key_2"

  availability_zone = "ap-south-1a"

  subnet_id     = aws_subnet.mysubnet.id

  security_groups = [ "${aws_security_group.mysg.id}" ]

  tags = {

    Name = "myteraOS"

  }

}

resource "null_resource" "null_vol_attach"  {

  depends_on = [

    aws_efs_mount_target.mymount,

  ]

  connection {

    type     = "ssh"

    user     = "ec2-user"

    private_key = tls_private_key.key_form.private_key_pem

    host     = aws_instance.myin.public_ip

  }

  provisioner "remote-exec" {

    inline = [

      "sleep 30",

      "sudo yum install -y httpd git php amazon-efs-utils nfs-utils",

      "sudo yum install git",

      "sudo systemctl start httpd",

      "sudo systemctl enable httpd",

      "sudo chmod ugo+rw /etc/fstab",

      "sudo echo '${aws_efs_file_system.myefs.id}:/ /var/www/html efs tls,_netdev' >> /etc/fstab",

      "sudo mount -a -t efs,nfs4 defaults",

      "sudo rm -rf /var/www/html/*",

      "sudo git clone https://github.com/SHADOW-01/terra1.git /var/www/html/"

    ]

  }

resource "aws_s3_bucket" "mybucket" {

  bucket = "bucket-created-from-tf"

  acl    = "public-read"

  force_destroy  = true

  cors_rule {

    allowed_headers = ["*"]

    allowed_methods = ["PUT", "POST"]

    allowed_origins = ["https://anantj12"]

    expose_headers  = ["ETag"]

    max_age_seconds = 3000

  }

 

depends_on = [

   null_resource.null_vol_attach,

  ]


}

resource "aws_s3_bucket_object" "object" {
  bucket = aws_s3_bucket.TERRAFORM_S3.bucket
  key    = "My_Image"
  acl = "public-read"
  source="Image_Asset.jpg"
  etag = filemd5("Image_Asset.jpg")
}

locals {

   s3_origin_id=aws_s3_bucket.mybucket.bucket

   image_url="$(aws_cloudfront_distribution.mycdistribution.domain_name)/$(aws_s3_bucket_object.image-pull.key)"

}

resource "aws_cloudfront_origin_access_identity" "origin_access_identity"{

    comment="Sync Cloudfront to s3"

}

 resource "aws_cloudfront_distribution" "mycdistribution" {

   origin {

         domain_name=aws_s3_bucket.mybucket.bucket_regional_domain_name

          origin_id=local.s3_origin_id

 

   s3_origin_config {

       origin_access_identity=aws_cloudfront_origin_access_identity.origin_access_identity.cloudfront_access_identity_path

    }

}

 enabled=true

 is_ipv6_enabled=true

 default_root_object="index.php"

 custom_error_response {

   error_caching_min_ttl=3000

   error_code=404

   response_code=200

   response_page_path="/gc.jpg"

}

default_cache_behavior {

   allowed_methods = ["DELETE", "GET", "HEAD", "OPTIONS", "PATCH", "POST", "PUT"]

   cached_methods = ["GET", "HEAD"]

   target_origin_id = local.s3_origin_id

   forwarded_values {

      query_string=false

   cookies {

     forward= "none"

  }

}

viewer_protocol_policy= "allow-all"

   min_ttl= 0

   default_ttl= 3600

   max_ttl= 86400

}

 restrictions {

   geo_restriction {

      restriction_type="none"

   }

}

viewer_certificate {

   cloudfront_default_certificate=true

}

tags = {

  Name="mycdistribution"

  }

# Configuring the server

connection {

    type     = "ssh"

    user     = "ec2-user"

    private_key =  tls_private_key.key_form.private_key_pem

    host     = aws_instance.myin.public_ip

  }

  provisioner "remote-exec" {

    inline = [

        "sudo su << EOF",

        "sudo chmod ugo+rw /var/www/html/",

        "sudo echo \"<img src='http://${aws_cloudfront_distribution.mycdistribution.domain_name}/$(aws_s3_bucket_object.image-pull.key)'>\" >> /var/www/html/index.php",

        "EOF"

    ]

  }

}

 

output "cloudfront_ip_addr" {

  value = aws_cloudfront_distribution.mycdistribution.domain_name

}

resource "null_resource" "key_pair"  {

             provisioner "local-exec" {

                 command = "echo  '${tls_private_key.key_form.private_key_pem}' > key.pem"

             }

}